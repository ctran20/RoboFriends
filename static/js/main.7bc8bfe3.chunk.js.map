{"version":3,"sources":["redux/constants.js","redux/reducer.js","components/Card.js","components/CardList.js","components/AddRobot.js","components/SearchBox.js","components/Header.js","robots.js","containers/App.js","redux/actions.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REFRESH_SEARCH_FIELD","ADD_ROBOT","CLEAR_ROBOT","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","initialStateSearch","searchField","initialStateAdd","inputBox","newBot","initialStateRobots","isPending","robots","error","Card","props","name","email","mode","theme","className","alt","src","replace","React","memo","CardList","cardComponent","map","user","i","AddRobot","addChange","addBot","style","width","type","placeholder","onChange","maxLength","onClick","SearchBox","searchChange","modeChange","Header","title","fontSize","robotsData","App","dispatch","useDispatch","useState","window","innerWidth","setWidth","useSelector","state","searchRobots","setMode","setTitle","styles","setTheme","filteredRobots","filter","robot","toLowerCase","includes","useEffect","handleResizeWindow","addEventListener","removeEventListener","length","flexDirection","event","payload","setAddChange","unshift","target","value","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","rootReducer","combineReducers","action","Object","assign","requestRobots","store","createStore","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7bc8bfe3.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REFRESH_SEARCH_FIELD = 'REFRESH_SEARCH_FIELD';\r\nexport const ADD_ROBOT = 'ADD_ROBOT';\r\nexport const CLEAR_ROBOT = 'CLEAR_ROBOT';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REFRESH_SEARCH_FIELD,\r\n  ADD_ROBOT,\r\n  CLEAR_ROBOT,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    case REFRESH_SEARCH_FIELD:\r\n      return Object.assign({}, state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateAdd = {\r\n  inputBox: {},\r\n  newBot: '',\r\n};\r\n\r\nexport const addChange = (state = initialStateAdd, action = {}) => {\r\n  switch (action.type) {\r\n    case ADD_ROBOT:\r\n      return Object.assign({}, state, {\r\n        inputBox: action.payload,\r\n        newBot: action.payload.target.value,\r\n      });\r\n    case CLEAR_ROBOT:\r\n      return Object.assign({}, initialStateAdd);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAIL:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  const { name, email, mode } = props;\r\n  let theme = '';\r\n  if (mode === 'set_set2/') {\r\n    theme = 'bg-yellow dib br3 pa3 ma2 grow';\r\n  } else {\r\n    theme = 'bg-light-green dib br3 pa3 ma2 grow';\r\n  }\r\n  return (\r\n    <div className={theme}>\r\n      <img\r\n        alt=\"robots_img\"\r\n        // prettier-ignore\r\n        src={`https://robohash.org/${mode}${name.replace(/\\s/g, '')}?size=250x250`}\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Card);\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n  const { robots, mode } = props;\r\n  const cardComponent = robots.map((user, i) => {\r\n    return (\r\n      <Card key={i} name={robots[i].name} email={robots[i].email} mode={mode} />\r\n    );\r\n  });\r\n\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default React.memo(CardList);\r\n","import React from 'react';\r\n\r\nconst AddRobot = ({ addChange, addBot, mode }) => {\r\n  let theme = '';\r\n  let name = '';\r\n\r\n  if (mode === 'set_set2/') {\r\n    theme = 'pa3 ba b--blue bg-yellow grow';\r\n    name = 'Add Alien';\r\n  } else {\r\n    theme = 'pa3 ba b--blue bg-light-green grow';\r\n    name = 'Add Robot';\r\n  }\r\n  return (\r\n    <div className=\"ma1\">\r\n      <input\r\n        style={{ width: 200 }}\r\n        type=\"text\"\r\n        className=\"pa3 ba b--blue bg-lightest-blue\"\r\n        placeholder=\"Name\"\r\n        onChange={addChange}\r\n        maxLength=\"20\"\r\n      />\r\n      <button\r\n        style={{ width: 150 }}\r\n        className={theme}\r\n        type=\"submit\"\r\n        onClick={addBot}\r\n      >\r\n        {name}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AddRobot);\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange, modeChange, mode }) => {\r\n  let theme = '';\r\n  let name = '';\r\n  if (mode === 'set_set2/') {\r\n    theme = 'pa3 ba b--blue bg-yellow grow';\r\n    name = 'Search Aliens';\r\n  } else {\r\n    theme = 'pa3 ba b--blue bg-light-green grow';\r\n    name = 'Search Robots';\r\n  }\r\n  return (\r\n    <div className=\"ma1\">\r\n      <input\r\n        style={{ width: 200 }}\r\n        type=\"text\"\r\n        className={'pa3 ba b--blue bg-lightest-blue'}\r\n        placeholder={name}\r\n        onChange={searchChange}\r\n        maxLength=\"20\"\r\n      />\r\n      <button\r\n        style={{ width: 150 }}\r\n        className={theme}\r\n        type=\"submit\"\r\n        onClick={modeChange}\r\n      >\r\n        Switch Mode\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchBox);\r\n","import React from 'react';\r\n\r\nconst Header = ({ width, theme, title }) => {\r\n  return (\r\n    <h1\r\n      style={width <= 760 ? { fontSize: '3rem' } : { fontSize: '5rem' }}\r\n      className={theme}\r\n    >\r\n      {title}\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default React.memo(Header);\r\n","export const robotsData = [\r\n  {\r\n    name: 'WALL-E',\r\n    email: 'wall_e@axiom.com',\r\n  },\r\n  {\r\n    name: 'Roomba',\r\n    email: 'carforpet@irobot.com',\r\n  },\r\n  {\r\n    name: 'R2D2',\r\n    email: 'r2d2@rebel.com',\r\n  },\r\n  {\r\n    name: 'HAL 9000',\r\n    email: 'podbaydoor@dave.com',\r\n  },\r\n  {\r\n    name: 'Glados',\r\n    email: 'portal@cake.com',\r\n  },\r\n  {\r\n    name: 'ASIM0',\r\n    email: 'tripping@honda.com',\r\n  },\r\n  {\r\n    name: 'T-800',\r\n    email: 'hastalavista@beback.com',\r\n  },\r\n  {\r\n    name: 'Bender Rodriguez',\r\n    email: 'bender@offender.com',\r\n  },\r\n  {\r\n    name: 'Optimus Prime',\r\n    email: 'autobots@rollout.com',\r\n  },\r\n  {\r\n    name: 'Butter Bot',\r\n    email: 'purpose@butter.com',\r\n  },\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport AddRobot from '../components/AddRobot';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Header from '../components/Header';\r\nimport { robotsData } from '../robots';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  setSearchField,\r\n  setAddChange,\r\n  refreshSearchField,\r\n  resetAddChange,\r\n} from '../redux/actions';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const { searchField } = useSelector((state) => state.searchRobots);\r\n  const { newBot, inputBox } = useSelector((state) => state.addChange);\r\n  /* For Fetching\r\n  const { robotz, isPending, error } = useSelector(\r\n    (state) => state.requestRobots\r\n  );*/\r\n\r\n  const robots = robotsData;\r\n  const [mode, setMode] = useState('');\r\n  const [title, setTitle] = useState('RoboFriends');\r\n  const styles = 'pointer lh-title grow';\r\n  const [theme, setTheme] = useState(styles + ' light-green');\r\n\r\n  const onAddChange = (event) => {\r\n    dispatch(setAddChange(event));\r\n  };\r\n\r\n  const onSearchChange = (event) => {\r\n    dispatch(setSearchField(event.target.value));\r\n  };\r\n\r\n  /* For fetching robots json from url\r\n  const onRequestRobots = () => {\r\n    dispatch(requestRobots());\r\n  };\r\n\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, []);\r\n  */\r\n\r\n  const modeChange = () => {\r\n    if (title === 'RoboFriends') {\r\n      setMode('set_set2/');\r\n      setTitle('AlienFriends');\r\n      setTheme(styles + ' yellow');\r\n    } else {\r\n      setMode('');\r\n      setTitle('RoboFriends');\r\n      setTheme(styles + ' light-green');\r\n    }\r\n  };\r\n\r\n  const addRobot = () => {\r\n    if (newBot.replace(/\\s/g, '') !== '') {\r\n      robots.unshift({\r\n        name: newBot,\r\n        email: newBot.replace(/\\s/g, '').toLowerCase() + '@robot.com',\r\n      });\r\n      inputBox.target.value = '';\r\n    }\r\n    dispatch(refreshSearchField());\r\n    dispatch(resetAddChange());\r\n  };\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  });\r\n\r\n  //Adjust Screen Layout\r\n  useEffect(() => {\r\n    const handleResizeWindow = () => setWidth(window.innerWidth);\r\n    window.addEventListener('resize', handleResizeWindow);\r\n    return () => {\r\n      window.removeEventListener('resize', handleResizeWindow);\r\n    };\r\n  }, []);\r\n\r\n  if (!robots.length /*isPending if fetching*/) {\r\n    return <h1>Loading...</h1>;\r\n    //if(!error) if fetching\r\n  } else {\r\n    return (\r\n      <div className=\"tc\">\r\n        <div className=\"titleFrame\">\r\n          <Header theme={theme} title={title} width={width} />\r\n        </div>\r\n        <div\r\n          className=\"ma4 buttonLayout\"\r\n          style={width <= 780 ? { flexDirection: 'column' } : {}}\r\n        >\r\n          <AddRobot mode={mode} addChange={onAddChange} addBot={addRobot} />\r\n          <SearchBox\r\n            mode={mode}\r\n            searchChange={onSearchChange}\r\n            modeChange={modeChange}\r\n          />\r\n        </div>\r\n        <CardList mode={mode} robots={filteredRobots} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REFRESH_SEARCH_FIELD,\r\n  ADD_ROBOT,\r\n  CLEAR_ROBOT,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const refreshSearchField = () => ({\r\n  type: REFRESH_SEARCH_FIELD,\r\n});\r\n\r\nexport const setAddChange = (event) => ({\r\n  type: ADD_ROBOT,\r\n  payload: event,\r\n});\r\n\r\nexport const resetAddChange = () => ({\r\n  type: CLEAR_ROBOT,\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error }));\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { searchRobots, requestRobots, addChange } from './redux/reducer';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'tachyons';\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots, addChange });\nconst store = createStore(\n  rootReducer\n  //applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}