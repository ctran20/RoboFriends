{"version":3,"sources":["redux/constants.js","redux/reducer.js","components/Card.js","components/CardList.js","components/AddRobot.js","components/SearchBox.js","robots.js","containers/App.js","redux/actions.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REFRESH_SEARCH_FIELD","ADD_ROBOT","CLEAR_ROBOT","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","initialStateSearch","searchField","initialStateAdd","inputBox","newBot","initialStateRobots","isPending","robots","error","Card","props","name","email","mode","theme","className","alt","src","replace","CardList","cardComponent","map","user","i","AddRobot","addChange","addBot","type","placeholder","onChange","maxLength","onClick","SearchBox","searchChange","modeChange","robotsData","App","dispatch","useDispatch","useSelector","state","searchRobots","useState","setMode","title","setTitle","styles","setTheme","filteredRobots","filter","robot","toLowerCase","includes","length","style","display","justifyContent","event","payload","setAddChange","unshift","target","value","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","Object","assign","requestRobots","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c09ff634.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REFRESH_SEARCH_FIELD = 'REFRESH_SEARCH_FIELD';\r\nexport const ADD_ROBOT = 'ADD_ROBOT';\r\nexport const CLEAR_ROBOT = 'CLEAR_ROBOT';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REFRESH_SEARCH_FIELD,\r\n  ADD_ROBOT,\r\n  CLEAR_ROBOT,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    case REFRESH_SEARCH_FIELD:\r\n      return Object.assign({}, state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateAdd = {\r\n  inputBox: {},\r\n  newBot: '',\r\n};\r\n\r\nexport const addChange = (state = initialStateAdd, action = {}) => {\r\n  switch (action.type) {\r\n    case ADD_ROBOT:\r\n      return Object.assign({}, state, {\r\n        inputBox: action.payload,\r\n        newBot: action.payload.target.value,\r\n      });\r\n    case CLEAR_ROBOT:\r\n      return Object.assign({}, initialStateAdd);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAIL:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  const { name, email, mode } = props;\r\n  let theme = '';\r\n  if (mode === 'set_set2/') {\r\n    theme = 'bg-yellow dib br3 pa3 ma2 grow';\r\n  } else {\r\n    theme = 'bg-light-green dib br3 pa3 ma2 grow';\r\n  }\r\n  return (\r\n    <div className={theme}>\r\n      <img\r\n        alt=\"robots_img\"\r\n        // prettier-ignore\r\n        src={`https://robohash.org/${mode}${name.replace(/\\s/g, '')}?size=250x250`}\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n  const { robots, mode } = props;\r\n  const cardComponent = robots.map((user, i) => {\r\n    return (\r\n      <Card key={i} name={robots[i].name} email={robots[i].email} mode={mode} />\r\n    );\r\n  });\r\n\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst AddRobot = ({ addChange, addBot, mode }) => {\r\n    let theme = '';\r\n    let name = '';\r\n\r\n    if (mode === 'set_set2/') {\r\n        theme = 'pa3 ba b--blue bg-yellow grow';\r\n        name = 'Add Alien';\r\n    } else {\r\n        theme = 'pa3 ba b--blue bg-light-green grow';\r\n        name = 'Add Robot';\r\n    }\r\n    return (\r\n        <div>\r\n            <input\r\n                type='text'\r\n                className='pa3 ba b--blue bg-lightest-blue'\r\n                placeholder='Name'\r\n                onChange={addChange}\r\n                maxLength=\"20\"\r\n            />\r\n            <button\r\n                className={theme}\r\n                type='submit'\r\n                onClick={addBot}\r\n            >{name}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddRobot;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange, modeChange, mode }) => {\r\n    let theme = '';\r\n    let name = '';\r\n    if (mode === 'set_set2/') {\r\n        theme = 'pa3 ba b--blue bg-yellow grow';\r\n        name = 'Search Aliens';\r\n    } else {\r\n        theme = 'pa3 ba b--blue bg-light-green grow';\r\n        name = 'Search Robots';\r\n    }\r\n    return (\r\n        <div>\r\n            <input\r\n                className={'pa3 ba b--green bg-lightest-blue'}\r\n                type='tex'\r\n                placeholder={name}\r\n                onChange={searchChange}\r\n                maxLength=\"20\"\r\n            />\r\n            <button\r\n                className={theme}\r\n                type='submit'\r\n                onClick={modeChange}\r\n            >Switch Mode</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const robotsData = [\r\n  {\r\n    name: 'WALL-E',\r\n    email: 'wall_e@axiom.com',\r\n  },\r\n  {\r\n    name: 'Roomba',\r\n    email: 'carforpet@irobot.com',\r\n  },\r\n  {\r\n    name: 'R2D2',\r\n    email: 'r2d2@rebel.com',\r\n  },\r\n  {\r\n    name: 'HAL 9000',\r\n    email: 'podbaydoor@dave.com',\r\n  },\r\n  {\r\n    name: 'Glados',\r\n    email: 'portal@cake.com',\r\n  },\r\n  {\r\n    name: 'ASIM0',\r\n    email: 'tripping@honda.com',\r\n  },\r\n  {\r\n    name: 'T-800',\r\n    email: 'hastalavista@beback.com',\r\n  },\r\n  {\r\n    name: 'Bender Rodriguez',\r\n    email: 'bender@offender.com',\r\n  },\r\n  {\r\n    name: 'Optimus Prime',\r\n    email: 'autobots@rollout.com',\r\n  },\r\n  {\r\n    name: 'Butter Bot',\r\n    email: 'purpose@butter.com',\r\n  },\r\n];\r\n","import React, { useState } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport AddRobot from '../components/AddRobot';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robotsData } from '../robots';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  setSearchField,\r\n  setAddChange,\r\n  refreshSearchField,\r\n  resetAddChange,\r\n} from '../redux/actions';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const { searchField } = useSelector((state) => state.searchRobots);\r\n  const { newBot, inputBox } = useSelector((state) => state.addChange);\r\n  /* For Fetching\r\n  const { robotz, isPending, error } = useSelector(\r\n    (state) => state.requestRobots\r\n  );*/\r\n\r\n  const robots = robotsData;\r\n  const [mode, setMode] = useState('');\r\n  const [title, setTitle] = useState('RoboFriends');\r\n  const styles = 'f-subheadline pointer lh-title grow';\r\n  const [theme, setTheme] = useState(styles + ' light-green');\r\n\r\n  const onAddChange = (event) => {\r\n    dispatch(setAddChange(event));\r\n  };\r\n\r\n  const onSearchChange = (event) => {\r\n    dispatch(setSearchField(event.target.value));\r\n  };\r\n\r\n  /* For fetching robots json from url\r\n  const onRequestRobots = () => {\r\n    dispatch(requestRobots());\r\n  };\r\n\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, []);\r\n  */\r\n\r\n  const modeChange = () => {\r\n    if (title === 'RoboFriends') {\r\n      setMode('set_set2/');\r\n      setTitle('AlienFriends');\r\n      setTheme(styles + ' yellow');\r\n    } else {\r\n      setMode('');\r\n      setTitle('RoboFriends');\r\n      setTheme(styles + ' light-green');\r\n    }\r\n  };\r\n\r\n  const addRobot = () => {\r\n    if (newBot.replace(/\\s/g, '') !== '') {\r\n      robots.unshift({\r\n        name: newBot,\r\n        email: newBot.replace(/\\s/g, '').toLowerCase() + '@robot.com',\r\n      });\r\n      inputBox.target.value = '';\r\n    }\r\n    dispatch(refreshSearchField());\r\n    dispatch(resetAddChange());\r\n  };\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  });\r\n\r\n  if (!robots.length /*isPending if fetching*/) {\r\n    return <h1>Loading...</h1>;\r\n    //if(!error) if fetching\r\n  } else {\r\n    return (\r\n      <div className=\"tc\">\r\n        <div className=\"titleFrame\">\r\n          <h1 className={theme}>{title}</h1>\r\n        </div>\r\n        <div\r\n          className=\"mb3\"\r\n          style={{ display: 'flex', justifyContent: 'space-evenly' }}\r\n        >\r\n          <AddRobot mode={mode} addChange={onAddChange} addBot={addRobot} />\r\n          <SearchBox\r\n            mode={mode}\r\n            searchChange={onSearchChange}\r\n            modeChange={modeChange}\r\n          />\r\n        </div>\r\n        <CardList mode={mode} robots={filteredRobots} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REFRESH_SEARCH_FIELD,\r\n  ADD_ROBOT,\r\n  CLEAR_ROBOT,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const refreshSearchField = () => ({\r\n  type: REFRESH_SEARCH_FIELD,\r\n});\r\n\r\nexport const setAddChange = (event) => ({\r\n  type: ADD_ROBOT,\r\n  payload: event,\r\n});\r\n\r\nexport const resetAddChange = () => ({\r\n  type: CLEAR_ROBOT,\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error }));\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { searchRobots, requestRobots, addChange } from './redux/reducer';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport 'tachyons';\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots, addChange });\nconst store = createStore(\n  rootReducer\n  //applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}